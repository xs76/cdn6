[[{"__type__":"cc.Prefab","_name":"sedan_sports","data":{"__id__":1}},{"__type__":"cc.Node","_name":"RootNode","_children":[{"__id__":2}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"6f094cf9-8161-4135-b64b-2500e6f45e4e"},"_is3DNode":true},{"__type__":"cc.Node","_name":"AI_Car_05","_parent":{"__id__":1},"_level":1,"_components":[{"__type__":"cc.MeshRenderer","node":{"__id__":2},"_materials":[{"__uuid__":"28Fj8uQtxLa7IdZsXhU0cM"},{"__uuid__":"7bRjaGxEtOCazzlZz4AWfH"},{"__uuid__":"36AJ32pONFhL1xh7nSXvmS"},{"__uuid__":"07uofpdytNpqAYHLcDgsZD"}],"_mesh":{"__uuid__":"1dJxk/CrVP/bH1e3ylsNgC"}}],"_prefab":{"__type__":"cc.PrefabInfo","root":{"__id__":1},"asset":{"__id__":0},"fileId":"AI_Car_05"},"_eulerAngles":{"__type__":"cc.Vec3","x":0.000009334666828389458},"_is3DNode":true}],{"__type__":"cc.Material","_effectAsset":{"__uuid__":"796vrvt+9F2Zw/WR3INvx6"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"diffuseTexture":{"__uuid__":"95H9rSueJC05pJOxj4puzd"}}},{"__type__":"cc.BitmapFont","_name":"Kenyancoffee","spriteFrame":{"__uuid__":"40HLWKWf1LYJowtR/TMm7Y"},"fontSize":36,"_fntConfig":{"commonHeight":43,"fontSize":36,"atlasName":"Kenyancoffee.png","fontDefDictionary":{"32":{"rect":{"x":22,"y":142,"width":0,"height":0},"xOffset":0,"yOffset":36,"xAdvance":7},"33":{"rect":{"x":216,"y":134,"width":14,"height":32},"xOffset":2,"yOffset":6,"xAdvance":7},"34":{"rect":{"x":92,"y":236,"width":14,"height":14},"xOffset":6,"yOffset":5,"xAdvance":12},"35":{"rect":{"x":70,"y":142,"width":20,"height":32},"xOffset":3,"yOffset":6,"xAdvance":16},"36":{"rect":{"x":30,"y":2,"width":20,"height":36},"xOffset":3,"yOffset":4,"xAdvance":15},"37":{"rect":{"x":2,"y":70,"width":26,"height":32},"xOffset":5,"yOffset":6,"xAdvance":26},"38":{"rect":{"x":172,"y":100,"width":18,"height":32},"xOffset":3,"yOffset":6,"xAdvance":15},"39":{"rect":{"x":244,"y":74,"width":8,"height":14},"xOffset":6,"yOffset":5,"xAdvance":6},"40":{"rect":{"x":30,"y":176,"width":16,"height":42},"xOffset":2,"yOffset":2,"xAdvance":10},"41":{"rect":{"x":30,"y":132,"width":16,"height":42},"xOffset":0,"yOffset":2,"xAdvance":10},"42":{"rect":{"x":188,"y":222,"width":16,"height":18},"xOffset":7,"yOffset":6,"xAdvance":16},"43":{"rect":{"x":132,"y":234,"width":18,"height":18},"xOffset":5,"yOffset":12,"xAdvance":18},"44":{"rect":{"x":216,"y":188,"width":8,"height":12},"xOffset":1,"yOffset":29,"xAdvance":7},"45":{"rect":{"x":226,"y":188,"width":10,"height":6},"xOffset":3,"yOffset":21,"xAdvance":8},"46":{"rect":{"x":112,"y":244,"width":8,"height":8},"xOffset":2,"yOffset":30,"xAdvance":7},"47":{"rect":{"x":2,"y":192,"width":20,"height":36},"xOffset":0,"yOffset":4,"xAdvance":10},"48":{"rect":{"x":70,"y":108,"width":20,"height":32},"xOffset":3,"yOffset":6,"xAdvance":15},"49":{"rect":{"x":200,"y":134,"width":14,"height":32},"xOffset":4,"yOffset":6,"xAdvance":9},"50":{"rect":{"x":70,"y":74,"width":20,"height":32},"xOffset":2,"yOffset":6,"xAdvance":15},"51":{"rect":{"x":224,"y":40,"width":20,"height":32},"xOffset":2,"yOffset":6,"xAdvance":15},"52":{"rect":{"x":152,"y":100,"width":18,"height":32},"xOffset":4,"yOffset":6,"xAdvance":16},"53":{"rect":{"x":202,"y":40,"width":20,"height":32},"xOffset":3,"yOffset":6,"xAdvance":15},"54":{"rect":{"x":180,"y":40,"width":20,"height":32},"xOffset":3,"yOffset":6,"xAdvance":15},"55":{"rect":{"x":132,"y":100,"width":18,"height":32},"xOffset":2,"yOffset":6,"xAdvance":12},"56":{"rect":{"x":158,"y":40,"width":20,"height":32},"xOffset":3,"yOffset":6,"xAdvance":15},"57":{"rect":{"x":136,"y":40,"width":20,"height":32},"xOffset":3,"yOffset":6,"xAdvance":15},"58":{"rect":{"x":238,"y":168,"width":10,"height":22},"xOffset":2,"yOffset":16,"xAdvance":7},"59":{"rect":{"x":170,"y":222,"width":12,"height":26},"xOffset":1,"yOffset":15,"xAdvance":7},"60":{"rect":{"x":188,"y":202,"width":20,"height":18},"xOffset":5,"yOffset":13,"xAdvance":18},"61":{"rect":{"x":210,"y":202,"width":20,"height":14},"xOffset":4,"yOffset":15,"xAdvance":18},"62":{"rect":{"x":216,"y":168,"width":20,"height":18},"xOffset":4,"yOffset":13,"xAdvance":18},"63":{"rect":{"x":132,"y":200,"width":16,"height":32},"xOffset":5,"yOffset":6,"xAdvance":14},"64":{"rect":{"x":114,"y":40,"width":20,"height":32},"xOffset":2,"yOffset":10,"xAdvance":16},"65":{"rect":{"x":92,"y":40,"width":20,"height":32},"xOffset":2,"yOffset":6,"xAdvance":15},"66":{"rect":{"x":70,"y":40,"width":20,"height":32},"xOffset":2,"yOffset":6,"xAdvance":15},"67":{"rect":{"x":48,"y":210,"width":20,"height":32},"xOffset":3,"yOffset":6,"xAdvance":15},"68":{"rect":{"x":48,"y":176,"width":20,"height":32},"xOffset":2,"yOffset":6,"xAdvance":15},"69":{"rect":{"x":112,"y":202,"width":18,"height":32},"xOffset":2,"yOffset":6,"xAdvance":11},"70":{"rect":{"x":112,"y":168,"width":18,"height":32},"xOffset":2,"yOffset":6,"xAdvance":11},"71":{"rect":{"x":48,"y":142,"width":20,"height":32},"xOffset":3,"yOffset":6,"xAdvance":15},"72":{"rect":{"x":48,"y":108,"width":20,"height":32},"xOffset":2,"yOffset":6,"xAdvance":16},"73":{"rect":{"x":184,"y":134,"width":14,"height":32},"xOffset":2,"yOffset":6,"xAdvance":8},"74":{"rect":{"x":48,"y":74,"width":20,"height":32},"xOffset":2,"yOffset":6,"xAdvance":14},"75":{"rect":{"x":100,"y":2,"width":22,"height":32},"xOffset":2,"yOffset":6,"xAdvance":15},"76":{"rect":{"x":168,"y":134,"width":14,"height":32},"xOffset":2,"yOffset":6,"xAdvance":11},"77":{"rect":{"x":2,"y":36,"width":26,"height":32},"xOffset":2,"yOffset":6,"xAdvance":20},"78":{"rect":{"x":76,"y":2,"width":22,"height":32},"xOffset":2,"yOffset":6,"xAdvance":16},"79":{"rect":{"x":48,"y":40,"width":20,"height":32},"xOffset":3,"yOffset":6,"xAdvance":15},"80":{"rect":{"x":232,"y":2,"width":20,"height":32},"xOffset":2,"yOffset":6,"xAdvance":15},"81":{"rect":{"x":124,"y":2,"width":20,"height":34},"xOffset":3,"yOffset":6,"xAdvance":15},"82":{"rect":{"x":210,"y":2,"width":20,"height":32},"xOffset":2,"yOffset":6,"xAdvance":15},"83":{"rect":{"x":188,"y":2,"width":20,"height":32},"xOffset":3,"yOffset":6,"xAdvance":15},"84":{"rect":{"x":132,"y":166,"width":16,"height":32},"xOffset":4,"yOffset":6,"xAdvance":12},"85":{"rect":{"x":166,"y":2,"width":20,"height":32},"xOffset":3,"yOffset":6,"xAdvance":15},"86":{"rect":{"x":112,"y":134,"width":18,"height":32},"xOffset":4,"yOffset":6,"xAdvance":14},"87":{"rect":{"x":2,"y":2,"width":26,"height":32},"xOffset":3,"yOffset":6,"xAdvance":21},"88":{"rect":{"x":52,"y":2,"width":22,"height":32},"xOffset":1,"yOffset":6,"xAdvance":14},"89":{"rect":{"x":112,"y":100,"width":18,"height":32},"xOffset":5,"yOffset":6,"xAdvance":13},"90":{"rect":{"x":92,"y":202,"width":18,"height":32},"xOffset":1,"yOffset":6,"xAdvance":12},"91":{"rect":{"x":2,"y":148,"width":18,"height":42},"xOffset":2,"yOffset":2,"xAdvance":10},"92":{"rect":{"x":22,"y":104,"width":6,"height":36},"xOffset":7,"yOffset":4,"xAdvance":10},"93":{"rect":{"x":2,"y":104,"width":18,"height":42},"xOffset":0,"yOffset":2,"xAdvance":10},"94":{"rect":{"x":2,"y":230,"width":18,"height":20},"xOffset":4,"yOffset":5,"xAdvance":17},"95":{"rect":{"x":112,"y":236,"width":18,"height":6},"xOffset":-1,"yOffset":36,"xAdvance":15},"96":{"rect":{"x":244,"y":90,"width":8,"height":8},"xOffset":7,"yOffset":6,"xAdvance":8},"97":{"rect":{"x":170,"y":168,"width":16,"height":26},"xOffset":2,"yOffset":12,"xAdvance":13},"98":{"rect":{"x":92,"y":168,"width":18,"height":32},"xOffset":2,"yOffset":6,"xAdvance":14},"99":{"rect":{"x":152,"y":224,"width":16,"height":26},"xOffset":2,"yOffset":12,"xAdvance":13},"100":{"rect":{"x":92,"y":134,"width":18,"height":32},"xOffset":2,"yOffset":6,"xAdvance":14},"101":{"rect":{"x":152,"y":196,"width":16,"height":26},"xOffset":2,"yOffset":12,"xAdvance":13},"102":{"rect":{"x":30,"y":220,"width":16,"height":32},"xOffset":2,"yOffset":6,"xAdvance":9},"103":{"rect":{"x":132,"y":134,"width":18,"height":30},"xOffset":1,"yOffset":13,"xAdvance":14},"104":{"rect":{"x":92,"y":100,"width":18,"height":32},"xOffset":2,"yOffset":6,"xAdvance":14},"105":{"rect":{"x":202,"y":168,"width":12,"height":32},"xOffset":2,"yOffset":6,"xAdvance":7},"106":{"rect":{"x":146,"y":2,"width":18,"height":36},"xOffset":-2,"yOffset":7,"xAdvance":7},"107":{"rect":{"x":70,"y":220,"width":18,"height":32},"xOffset":2,"yOffset":6,"xAdvance":14},"108":{"rect":{"x":188,"y":168,"width":12,"height":32},"xOffset":2,"yOffset":6,"xAdvance":7},"109":{"rect":{"x":118,"y":74,"width":24,"height":24},"xOffset":2,"yOffset":14,"xAdvance":21},"110":{"rect":{"x":224,"y":74,"width":18,"height":24},"xOffset":2,"yOffset":14,"xAdvance":14},"111":{"rect":{"x":152,"y":168,"width":16,"height":26},"xOffset":2,"yOffset":12,"xAdvance":13},"112":{"rect":{"x":232,"y":100,"width":18,"height":30},"xOffset":1,"yOffset":13,"xAdvance":14},"113":{"rect":{"x":212,"y":100,"width":18,"height":30},"xOffset":2,"yOffset":13,"xAdvance":14},"114":{"rect":{"x":204,"y":74,"width":18,"height":24},"xOffset":2,"yOffset":14,"xAdvance":13},"115":{"rect":{"x":232,"y":134,"width":16,"height":26},"xOffset":2,"yOffset":12,"xAdvance":13},"116":{"rect":{"x":152,"y":134,"width":14,"height":32},"xOffset":3,"yOffset":6,"xAdvance":9},"117":{"rect":{"x":184,"y":74,"width":18,"height":24},"xOffset":3,"yOffset":14,"xAdvance":14},"118":{"rect":{"x":170,"y":196,"width":16,"height":24},"xOffset":3,"yOffset":14,"xAdvance":12},"119":{"rect":{"x":92,"y":74,"width":24,"height":24},"xOffset":3,"yOffset":14,"xAdvance":20},"120":{"rect":{"x":164,"y":74,"width":18,"height":24},"xOffset":1,"yOffset":14,"xAdvance":13},"121":{"rect":{"x":192,"y":100,"width":18,"height":30},"xOffset":2,"yOffset":13,"xAdvance":14},"122":{"rect":{"x":144,"y":74,"width":18,"height":24},"xOffset":1,"yOffset":14,"xAdvance":11},"123":{"rect":{"x":30,"y":86,"width":16,"height":44},"xOffset":3,"yOffset":1,"xAdvance":10},"124":{"rect":{"x":70,"y":176,"width":14,"height":42},"xOffset":2,"yOffset":2,"xAdvance":9},"125":{"rect":{"x":30,"y":40,"width":16,"height":44},"xOffset":-1,"yOffset":1,"xAdvance":10},"126":{"rect":{"x":48,"y":244,"width":18,"height":8},"xOffset":4,"yOffset":18,"xAdvance":19}},"kerningDict":{"2228258":1,"2228263":1,"2228298":-1,"2555938":1,"2555943":1,"2555978":-1,"3604524":-1,"3604526":-1,"5242924":-1,"5242926":-1,"7471148":-1,"7471150":-1}}},{"__type__":"cc.Mesh","_native":".bin","_vertexBundles":[{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","length":13680},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2},{"__type__":"cc.mesh.VertexFormat","name":"a_uv1","type":5126,"num":2}],"verticesCount":342},{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","offset":14796,"length":40800},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2},{"__type__":"cc.mesh.VertexFormat","name":"a_uv1","type":5126,"num":2}],"verticesCount":1020},{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","offset":59136,"length":1680},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2},{"__type__":"cc.mesh.VertexFormat","name":"a_uv1","type":5126,"num":2}],"verticesCount":42},{"__type__":"cc.mesh.VertexBundle","data":{"__type__":"cc.BufferRange","offset":61044,"length":1160},"formats":[{"__type__":"cc.mesh.VertexFormat","name":"a_normal","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_position","type":5126,"num":3},{"__type__":"cc.mesh.VertexFormat","name":"a_uv0","type":5126,"num":2},{"__type__":"cc.mesh.VertexFormat","name":"a_uv1","type":5126,"num":2}],"verticesCount":29}],"_primitives":[{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[0],"data":{"__type__":"cc.BufferRange","offset":13680,"length":1116}},{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[1],"data":{"__type__":"cc.BufferRange","offset":55596,"length":3540}},{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[2],"data":{"__type__":"cc.BufferRange","offset":60816,"length":228}},{"__type__":"cc.mesh.Primitive","vertexBundleIndices":[3],"data":{"__type__":"cc.BufferRange","offset":62204,"length":108}}],"_minPos":{"__type__":"cc.Vec3","x":-0.00675566401332617,"z":-0.0169703736901283},"_maxPos":{"__type__":"cc.Vec3","x":0.00675566494464874,"y":0.00954746175557375,"z":0.01306420750916}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"6dkeWRTOBGXICfYQ7JUBnG"},"_defines":{},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255}}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"796vrvt+9F2Zw/WR3INvx6"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"diffuseTexture":{"__uuid__":"afbEB+2PVOn4uba+N5+MNN"}}},{"__type__":"cc.SpriteFrame","content":{"name":"Kenyancoffee","texture":"3e6tvi2cpNWLKHv16P8pGX","rect":[3,3,248,249],"offset":[-1,0.5],"originalSize":[256,256],"capInsets":[0,0,0,0]}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"65pdkw0jFLtZvzKhVBHUa9"},"_defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":false},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"fog_distance":1000,"fog_color":{"__type__":"cc.Color","r":91,"g":117,"b":141},"diffuseTexture":{"__uuid__":"94RtD1iM5Pz7knf1qJth40"}}},{"__type__":"cc.EffectAsset","_name":"FogEffect","properties":{"fog_distance":{"value":100},"fog_color":{"type":9,"value":[1,1,1,1]},"diffuseTexture":{"type":13,"value":null},"diffuseColor":{"type":9,"value":[1,1,1,1]},"alphaThreshold":{"value":0.5}},"techniques":[{"passes":[{"cullMode":0,"depthTest":true,"depthWrite":true,"blend":true,"program":"30fe4e6d8273ee610924c39db633c2189eaac9988ab27c81b53e7e52"}],"layer":0,"stages":["opaque"],"queue":0,"priority":0}],"shaders":[{"vert":"\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matWorld;\nuniform mat3 cc_matWorldIT;\n\nuniform mat4 cc_matView;\n\nuniform mat4 cc_matViewProj;\n\nuniform vec3 cc_cameraPos;                       \n\nuniform vec3 cc_sceneAmbient;                    \n\n#ifndef USE_DIFFUSE_TEXTURE\n  #ifndef USE_EMISSIVE_TEXTURE\n    #ifndef USE_SPECULAR_TEXTURE\n      #ifndef USE_NORMAL_TEXTURE\n        #define _NOT_USE_TEXTURE 1\n      #endif\n    #endif\n  #endif\n#endif\n\n#if USE_TILING_OFFSET && _USE_ATTRIBUTE_UV0\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n#endif\n\n#ifdef _IS_VERT_SHADER\n  attribute vec3 a_position;\n#endif\n\n#ifndef _NOT_USE_TEXTURE\n\n  #if _USE_ATTRIBUTE_UV0\n    #ifdef _IS_VERT_SHADER\n      attribute mediump vec2 a_uv0;\n    #endif\n\n    varying mediump vec2 v_uv0;\n  #endif\n\n#endif\n\n#if _USE_ATTRIBUTE_COLOR\n\n  #ifdef _IS_VERT_SHADER\n    attribute lowp vec4 a_color;\n  #endif\n\n  varying lowp vec4 v_color;\n#endif\n\n#if _USE_ATTRIBUTE_NORMAL\n  #ifdef _IS_VERT_SHADER\n    attribute vec3 a_normal;\n  #endif\n#endif\n\n#ifdef _IS_VERT_SHADER\n\n  void ATTRIBUTE_TO_VARYING () {\n\n    #if _USE_ATTRIBUTE_COLOR\n        v_color = a_color;\n    #endif\n\n    #ifndef _NOT_USE_TEXTURE\n      #if _USE_ATTRIBUTE_UV0\n        v_uv0 = a_uv0;\n\n        #if USE_TILING_OFFSET\n          v_uv0 = v_uv0 * mainTiling + mainOffset;\n        #endif\n      #endif\n    #endif\n\n  }\n\n#endif\n\nvoid MUL_ATTR_COLOR (inout vec4 color) {\n  #if _USE_ATTRIBUTE_COLOR\n    #ifdef _IS_VERT_SHADER\n      color *= a_color;\n    #else\n      color *= v_color;\n    #endif\n  #endif\n}\n\nvoid MUL_ATTR_NORMAL (inout vec3 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal *= a_normal;\n    #endif\n  #endif\n}\nvoid MUL_ATTR_NORMAL (inout vec4 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal.xyz *= a_normal;\n    #endif\n  #endif\n}\n\n#if _USE_SKINNING\n\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n\n  #if _USE_JOINTS_TEXTRUE\n    uniform sampler2D _jointsTexture;\n    uniform vec2 _jointsTextureSize;\n\n    #if _JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = _jointsTextureSize.x;\n        float height = _jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        \n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = _jointsTextureSize.x;\n        float height = _jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    const int _JOINT_MATRICES_SIZE = 50;\n    uniform mat4 _jointMatrices[_JOINT_MATRICES_SIZE];\n\n    mat4 getBoneMatrix(const in float i) {\n      return _jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n\n  SKIN_VERTEX(position);\n  ATTRIBUTE_TO_VARYING();\n\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}\n\n\n","frag":"\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#ifndef USE_DIFFUSE_TEXTURE\n  #ifndef USE_EMISSIVE_TEXTURE\n    #ifndef USE_SPECULAR_TEXTURE\n      #ifndef USE_NORMAL_TEXTURE\n        #define _NOT_USE_TEXTURE 1\n      #endif\n    #endif\n  #endif\n#endif\n\n#if USE_TILING_OFFSET && _USE_ATTRIBUTE_UV0\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n#endif\n\n#ifdef _IS_VERT_SHADER\n  attribute vec3 a_position;\n#endif\n\n#ifndef _NOT_USE_TEXTURE\n\n  #if _USE_ATTRIBUTE_UV0\n    #ifdef _IS_VERT_SHADER\n      attribute mediump vec2 a_uv0;\n    #endif\n\n    varying mediump vec2 v_uv0;\n  #endif\n\n#endif\n\n#if _USE_ATTRIBUTE_COLOR\n\n  #ifdef _IS_VERT_SHADER\n    attribute lowp vec4 a_color;\n  #endif\n\n  varying lowp vec4 v_color;\n#endif\n\n#if _USE_ATTRIBUTE_NORMAL\n  #ifdef _IS_VERT_SHADER\n    attribute vec3 a_normal;\n  #endif\n#endif\n\n#ifdef _IS_VERT_SHADER\n\n  void ATTRIBUTE_TO_VARYING () {\n\n    #if _USE_ATTRIBUTE_COLOR\n        v_color = a_color;\n    #endif\n\n    #ifndef _NOT_USE_TEXTURE\n      #if _USE_ATTRIBUTE_UV0\n        v_uv0 = a_uv0;\n\n        #if USE_TILING_OFFSET\n          v_uv0 = v_uv0 * mainTiling + mainOffset;\n        #endif\n      #endif\n    #endif\n\n  }\n\n#endif\n\nvoid MUL_ATTR_COLOR (inout vec4 color) {\n  #if _USE_ATTRIBUTE_COLOR\n    #ifdef _IS_VERT_SHADER\n      color *= a_color;\n    #else\n      color *= v_color;\n    #endif\n  #endif\n}\n\nvoid MUL_ATTR_NORMAL (inout vec3 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal *= a_normal;\n    #endif\n  #endif\n}\nvoid MUL_ATTR_NORMAL (inout vec4 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal.xyz *= a_normal;\n    #endif\n  #endif\n}\n\nvec3 gammaToLinearSpaceRGB(in vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\n\nvec3 linearToGammaSpaceRGB(in vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\nvec4 gammaToLinearSpaceRGBA(in vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\n\nvec4 linearToGammaSpaceRGBA(in vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\n\nvec4 linearToLinear (in vec4 value) {\n  return value;\n}\n\n#if INPUT_IS_GAMMA\n  #define TEXEL_TO_LINEAR gammaToLinearSpaceRGBA\n#else\n  #define TEXEL_TO_LINEAR linearToLinear\n#endif\n\n#if OUTPUT_TO_GAMMA\n  #define LINEAR_TO_OUTPUT_TEXEL linearToGammaSpaceRGBA\n#else\n  #define LINEAR_TO_OUTPUT_TEXEL linearToLinear\n#endif\n\nuniform lowp vec4 diffuseColor;\n\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color, in vec2 uv) {\n  #if USE_DIFFUSE_TEXTURE && _USE_ATTRIBUTE_UV0\n    vec4 diffuseTextureColor = texture2D(diffuseTexture, uv);\n    #if _USE_ETC1_DIFFUSETEXTURE\n      diffuseTextureColor.a *= texture2D(diffuseTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    color *= TEXEL_TO_LINEAR(diffuseTextureColor);\n  #endif\n}\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color) {\n  #if USE_DIFFUSE_TEXTURE && _USE_ATTRIBUTE_UV0\n    \n    #ifdef _IS_VERT_SHADER\n      vec2 uv = a_uv0;\n    #else\n      vec2 uv = v_uv0;\n    #endif\n\n    MULTIPLY_DIFFUSE_TEXTRUE_COLOR(color, uv);\n  #endif\n}\n\nvoid CALC_DIFFUSE (inout vec4 diffuse, in vec2 uv) {\n  diffuse = diffuseColor;\n\n  MUL_ATTR_COLOR(diffuse);\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(diffuse, uv);\n}\n\nvoid CALC_DIFFUSE (inout vec4 diffuse) {\n  diffuse = diffuseColor;\n\n  MUL_ATTR_COLOR(diffuse);\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(diffuse);\n}\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nuniform vec4 fog_color; \nuniform float fog_distance; \n\nvoid main () {\n  vec4 diffuse;\n  CALC_DIFFUSE(diffuse);\n  \n  \n\n    float fog_ratio =  1.0-exp(-gl_FragCoord.w*fog_distance); \n\n    gl_FragColor = diffuse * fog_ratio + (1.0-fog_ratio) * fog_color;\n\n  \n}\n\n\n","defines":[{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE","USE_EMISSIVE_TEXTURE"]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE","USE_EMISSIVE_TEXTURE","USE_SPECULAR_TEXTURE"]},{"name":"USE_TILING_OFFSET","type":"boolean","defines":[]},{"name":"_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"_USE_SKINNING","type":"boolean","defines":[]},{"name":"_USE_JOINTS_TEXTRUE","type":"boolean","defines":["_USE_SKINNING"]},{"name":"_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["_USE_SKINNING","_USE_JOINTS_TEXTRUE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"_USE_ETC1_DIFFUSETEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE","_USE_ATTRIBUTE_UV0"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"uniforms":[{"name":"mainTiling","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"mainOffset","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"mainTiling","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"mainOffset","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"diffuseColor","type":9,"property":true,"defines":[]},{"name":"diffuseTexture","type":13,"property":true,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"alphaThreshold","type":4,"property":true,"defines":["USE_ALPHA_TEST"]},{"name":"fog_color","type":7,"defines":[]},{"name":"fog_distance","type":4,"defines":[]}],"attributes":[{"name":"a_position","type":6,"defines":[]},{"name":"a_uv0","type":5,"defines":["_USE_ATTRIBUTE_UV0"]},{"name":"a_color","type":7,"defines":["_USE_ATTRIBUTE_COLOR"]},{"name":"a_normal","type":6,"defines":["_USE_ATTRIBUTE_NORMAL"]},{"name":"a_weights","type":7,"defines":["_USE_SKINNING"]},{"name":"a_joints","type":7,"defines":["_USE_SKINNING"]},{"name":"a_position","type":6,"defines":[]},{"name":"a_uv0","type":5,"defines":["_USE_ATTRIBUTE_UV0"]},{"name":"a_color","type":7,"defines":["_USE_ATTRIBUTE_COLOR"]},{"name":"a_normal","type":6,"defines":["_USE_ATTRIBUTE_NORMAL"]}],"extensions":[],"name":"30fe4e6d8273ee610924c39db633c2189eaac9988ab27c81b53e7e52"}]},{"__type__":"cc.EffectAsset","_name":"builtin-unlit","properties":{"diffuseTexture":{"type":13,"value":null},"diffuseColor":{"type":9,"value":[1,1,1,1]},"alphaThreshold":{"value":0.5}},"techniques":[{"passes":[{"cullMode":0,"depthTest":true,"depthWrite":true,"blend":true,"program":"8af5ee8040d8725057e4d5f8bac775803dac5e5263fc2495a0b4cc79"}],"layer":0,"stages":["opaque"],"queue":0,"priority":0}],"shaders":[{"vert":"\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matWorld;\nuniform mat3 cc_matWorldIT;\n\nuniform mat4 cc_matView;\n\nuniform mat4 cc_matViewProj;\n\nuniform vec3 cc_cameraPos;                       \n\nuniform vec3 cc_sceneAmbient;                    \n\n#ifndef USE_DIFFUSE_TEXTURE\n  #ifndef USE_EMISSIVE_TEXTURE\n    #ifndef USE_SPECULAR_TEXTURE\n      #ifndef USE_NORMAL_TEXTURE\n        #define _NOT_USE_TEXTURE 1\n      #endif\n    #endif\n  #endif\n#endif\n\n#if USE_TILING_OFFSET && _USE_ATTRIBUTE_UV0\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n#endif\n\n#ifdef _IS_VERT_SHADER\n  attribute vec3 a_position;\n#endif\n\n#ifndef _NOT_USE_TEXTURE\n\n  #if _USE_ATTRIBUTE_UV0\n    #ifdef _IS_VERT_SHADER\n      attribute mediump vec2 a_uv0;\n    #endif\n\n    varying mediump vec2 v_uv0;\n  #endif\n\n#endif\n\n#if _USE_ATTRIBUTE_COLOR\n\n  #ifdef _IS_VERT_SHADER\n    attribute lowp vec4 a_color;\n  #endif\n\n  varying lowp vec4 v_color;\n#endif\n\n#if _USE_ATTRIBUTE_NORMAL\n  #ifdef _IS_VERT_SHADER\n    attribute vec3 a_normal;\n  #endif\n#endif\n\n#ifdef _IS_VERT_SHADER\n\n  void ATTRIBUTE_TO_VARYING () {\n\n    #if _USE_ATTRIBUTE_COLOR\n        v_color = a_color;\n    #endif\n\n    #ifndef _NOT_USE_TEXTURE\n      #if _USE_ATTRIBUTE_UV0\n        v_uv0 = a_uv0;\n\n        #if USE_TILING_OFFSET\n          v_uv0 = v_uv0 * mainTiling + mainOffset;\n        #endif\n      #endif\n    #endif\n\n  }\n\n#endif\n\nvoid MUL_ATTR_COLOR (inout vec4 color) {\n  #if _USE_ATTRIBUTE_COLOR\n    #ifdef _IS_VERT_SHADER\n      color *= a_color;\n    #else\n      color *= v_color;\n    #endif\n  #endif\n}\n\nvoid MUL_ATTR_NORMAL (inout vec3 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal *= a_normal;\n    #endif\n  #endif\n}\nvoid MUL_ATTR_NORMAL (inout vec4 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal.xyz *= a_normal;\n    #endif\n  #endif\n}\n\n#if _USE_SKINNING\n\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n\n  #if _USE_JOINTS_TEXTRUE\n    uniform sampler2D _jointsTexture;\n    uniform vec2 _jointsTextureSize;\n\n    #if _JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = _jointsTextureSize.x;\n        float height = _jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        \n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = _jointsTextureSize.x;\n        float height = _jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    const int _JOINT_MATRICES_SIZE = 50;\n    uniform mat4 _jointMatrices[_JOINT_MATRICES_SIZE];\n\n    mat4 getBoneMatrix(const in float i) {\n      return _jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n\n  SKIN_VERTEX(position);\n  ATTRIBUTE_TO_VARYING();\n\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}\n\n\n","frag":"\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#ifndef USE_DIFFUSE_TEXTURE\n  #ifndef USE_EMISSIVE_TEXTURE\n    #ifndef USE_SPECULAR_TEXTURE\n      #ifndef USE_NORMAL_TEXTURE\n        #define _NOT_USE_TEXTURE 1\n      #endif\n    #endif\n  #endif\n#endif\n\n#if USE_TILING_OFFSET && _USE_ATTRIBUTE_UV0\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n#endif\n\n#ifdef _IS_VERT_SHADER\n  attribute vec3 a_position;\n#endif\n\n#ifndef _NOT_USE_TEXTURE\n\n  #if _USE_ATTRIBUTE_UV0\n    #ifdef _IS_VERT_SHADER\n      attribute mediump vec2 a_uv0;\n    #endif\n\n    varying mediump vec2 v_uv0;\n  #endif\n\n#endif\n\n#if _USE_ATTRIBUTE_COLOR\n\n  #ifdef _IS_VERT_SHADER\n    attribute lowp vec4 a_color;\n  #endif\n\n  varying lowp vec4 v_color;\n#endif\n\n#if _USE_ATTRIBUTE_NORMAL\n  #ifdef _IS_VERT_SHADER\n    attribute vec3 a_normal;\n  #endif\n#endif\n\n#ifdef _IS_VERT_SHADER\n\n  void ATTRIBUTE_TO_VARYING () {\n\n    #if _USE_ATTRIBUTE_COLOR\n        v_color = a_color;\n    #endif\n\n    #ifndef _NOT_USE_TEXTURE\n      #if _USE_ATTRIBUTE_UV0\n        v_uv0 = a_uv0;\n\n        #if USE_TILING_OFFSET\n          v_uv0 = v_uv0 * mainTiling + mainOffset;\n        #endif\n      #endif\n    #endif\n\n  }\n\n#endif\n\nvoid MUL_ATTR_COLOR (inout vec4 color) {\n  #if _USE_ATTRIBUTE_COLOR\n    #ifdef _IS_VERT_SHADER\n      color *= a_color;\n    #else\n      color *= v_color;\n    #endif\n  #endif\n}\n\nvoid MUL_ATTR_NORMAL (inout vec3 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal *= a_normal;\n    #endif\n  #endif\n}\nvoid MUL_ATTR_NORMAL (inout vec4 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal.xyz *= a_normal;\n    #endif\n  #endif\n}\n\nvec3 gammaToLinearSpaceRGB(in vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\n\nvec3 linearToGammaSpaceRGB(in vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\nvec4 gammaToLinearSpaceRGBA(in vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\n\nvec4 linearToGammaSpaceRGBA(in vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\n\nvec4 linearToLinear (in vec4 value) {\n  return value;\n}\n\n#if INPUT_IS_GAMMA\n  #define TEXEL_TO_LINEAR gammaToLinearSpaceRGBA\n#else\n  #define TEXEL_TO_LINEAR linearToLinear\n#endif\n\n#if OUTPUT_TO_GAMMA\n  #define LINEAR_TO_OUTPUT_TEXEL linearToGammaSpaceRGBA\n#else\n  #define LINEAR_TO_OUTPUT_TEXEL linearToLinear\n#endif\n\nuniform lowp vec4 diffuseColor;\n\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color, in vec2 uv) {\n  #if USE_DIFFUSE_TEXTURE && _USE_ATTRIBUTE_UV0\n    vec4 diffuseTextureColor = texture2D(diffuseTexture, uv);\n    #if _USE_ETC1_DIFFUSETEXTURE\n      diffuseTextureColor.a *= texture2D(diffuseTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    color *= TEXEL_TO_LINEAR(diffuseTextureColor);\n  #endif\n}\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color) {\n  #if USE_DIFFUSE_TEXTURE && _USE_ATTRIBUTE_UV0\n    \n    #ifdef _IS_VERT_SHADER\n      vec2 uv = a_uv0;\n    #else\n      vec2 uv = v_uv0;\n    #endif\n\n    MULTIPLY_DIFFUSE_TEXTRUE_COLOR(color, uv);\n  #endif\n}\n\nvoid CALC_DIFFUSE (inout vec4 diffuse, in vec2 uv) {\n  diffuse = diffuseColor;\n\n  MUL_ATTR_COLOR(diffuse);\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(diffuse, uv);\n}\n\nvoid CALC_DIFFUSE (inout vec4 diffuse) {\n  diffuse = diffuseColor;\n\n  MUL_ATTR_COLOR(diffuse);\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(diffuse);\n}\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvoid main () {\n  vec4 diffuse;\n  CALC_DIFFUSE(diffuse);\n  ALPHA_TEST(diffuse);\n  gl_FragColor = LINEAR_TO_OUTPUT_TEXEL( diffuse );\n}\n\n\n","defines":[{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE","USE_EMISSIVE_TEXTURE"]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE","USE_EMISSIVE_TEXTURE","USE_SPECULAR_TEXTURE"]},{"name":"USE_TILING_OFFSET","type":"boolean","defines":[]},{"name":"_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"_USE_SKINNING","type":"boolean","defines":[]},{"name":"_USE_JOINTS_TEXTRUE","type":"boolean","defines":["_USE_SKINNING"]},{"name":"_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["_USE_SKINNING","_USE_JOINTS_TEXTRUE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"_USE_ETC1_DIFFUSETEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE","_USE_ATTRIBUTE_UV0"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"uniforms":[{"name":"mainTiling","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"mainOffset","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"mainTiling","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"mainOffset","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"diffuseColor","type":9,"property":true,"defines":[]},{"name":"diffuseTexture","type":13,"property":true,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"alphaThreshold","type":4,"property":true,"defines":["USE_ALPHA_TEST"]}],"attributes":[{"name":"a_position","type":6,"defines":[]},{"name":"a_uv0","type":5,"defines":["_USE_ATTRIBUTE_UV0"]},{"name":"a_color","type":7,"defines":["_USE_ATTRIBUTE_COLOR"]},{"name":"a_normal","type":6,"defines":["_USE_ATTRIBUTE_NORMAL"]},{"name":"a_weights","type":7,"defines":["_USE_SKINNING"]},{"name":"a_joints","type":7,"defines":["_USE_SKINNING"]},{"name":"a_position","type":6,"defines":[]},{"name":"a_uv0","type":5,"defines":["_USE_ATTRIBUTE_UV0"]},{"name":"a_color","type":7,"defines":["_USE_ATTRIBUTE_COLOR"]},{"name":"a_normal","type":6,"defines":["_USE_ATTRIBUTE_NORMAL"]}],"extensions":[],"name":"8af5ee8040d8725057e4d5f8bac775803dac5e5263fc2495a0b4cc79"}]},{"__type__":"cc.Material","_name":"shadow_material","_effectAsset":{"__uuid__":"796vrvt+9F2Zw/WR3INvx6"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":255,"b":255,"a":100},"diffuseTexture":{"__uuid__":"8ddraT4wxF+q4Df6rlaZ2r"}}},{"__type__":"cc.Material","_effectAsset":{"__uuid__":"6dkeWRTOBGXICfYQ7JUBnG"},"_defines":{"USE_DIFFUSE_TEXTURE":true},"_props":{"diffuseColor":{"__type__":"cc.Color","r":255,"g":193,"b":83},"diffuseTexture":{"__uuid__":"94RtD1iM5Pz7knf1qJth40"}}},{"__type__":"cc.EffectAsset","_name":"builtin-phong","properties":{"mainTiling":{"type":5,"value":[1,1]},"mainOffset":{"type":5,"value":[0,0]},"diffuseColor":{"type":9,"value":[1,1,1,1]},"diffuseTexture":{"type":13,"value":null},"specularColor":{"type":8,"value":[1,1,1]},"specularTexture":{"type":13,"value":null},"emissiveColor":{"type":8,"value":[0,0,0]},"emissiveTexture":{"type":13,"value":null},"glossiness":{"type":4,"value":10},"normalTexture":{"type":13,"value":null},"alphaThreshold":{"type":4,"value":0}},"techniques":[{"passes":[{"cullMode":1029,"depthTest":true,"depthWrite":true,"program":"c2dcea110628bad21ccf3b9f6889d5115841395d2cb7ea7bc397f61f"}],"stages":["opaque"],"queue":0,"priority":0},{"stages":["shadowcast"],"passes":[{"cullMode":1029,"depthTest":true,"depthWrite":true,"program":"9a91382f3710c7bfc6b1ac208fac93945dd4609a0e76c9995e1601fd"}],"queue":0,"priority":0}],"shaders":[{"vert":"\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matWorld;\nuniform mat3 cc_matWorldIT;\n\nuniform mat4 cc_matView;\n\nuniform mat4 cc_matViewProj;\n\nuniform vec3 cc_cameraPos;                       \n\nuniform vec3 cc_sceneAmbient;                    \n\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\n\n#ifndef USE_DIFFUSE_TEXTURE\n  #ifndef USE_EMISSIVE_TEXTURE\n    #ifndef USE_SPECULAR_TEXTURE\n      #ifndef USE_NORMAL_TEXTURE\n        #define _NOT_USE_TEXTURE 1\n      #endif\n    #endif\n  #endif\n#endif\n\n#if USE_TILING_OFFSET && _USE_ATTRIBUTE_UV0\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n#endif\n\n#ifdef _IS_VERT_SHADER\n  attribute vec3 a_position;\n#endif\n\n#ifndef _NOT_USE_TEXTURE\n\n  #if _USE_ATTRIBUTE_UV0\n    #ifdef _IS_VERT_SHADER\n      attribute mediump vec2 a_uv0;\n    #endif\n\n    varying mediump vec2 v_uv0;\n  #endif\n\n#endif\n\n#if _USE_ATTRIBUTE_COLOR\n\n  #ifdef _IS_VERT_SHADER\n    attribute lowp vec4 a_color;\n  #endif\n\n  varying lowp vec4 v_color;\n#endif\n\n#if _USE_ATTRIBUTE_NORMAL\n  #ifdef _IS_VERT_SHADER\n    attribute vec3 a_normal;\n  #endif\n#endif\n\n#ifdef _IS_VERT_SHADER\n\n  void ATTRIBUTE_TO_VARYING () {\n\n    #if _USE_ATTRIBUTE_COLOR\n        v_color = a_color;\n    #endif\n\n    #ifndef _NOT_USE_TEXTURE\n      #if _USE_ATTRIBUTE_UV0\n        v_uv0 = a_uv0;\n\n        #if USE_TILING_OFFSET\n          v_uv0 = v_uv0 * mainTiling + mainOffset;\n        #endif\n      #endif\n    #endif\n\n  }\n\n#endif\n\nvoid MUL_ATTR_COLOR (inout vec4 color) {\n  #if _USE_ATTRIBUTE_COLOR\n    #ifdef _IS_VERT_SHADER\n      color *= a_color;\n    #else\n      color *= v_color;\n    #endif\n  #endif\n}\n\nvoid MUL_ATTR_NORMAL (inout vec3 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal *= a_normal;\n    #endif\n  #endif\n}\nvoid MUL_ATTR_NORMAL (inout vec4 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal.xyz *= a_normal;\n    #endif\n  #endif\n}\n\n#if _USE_SKINNING\n\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n\n  #if _USE_JOINTS_TEXTRUE\n    uniform sampler2D _jointsTexture;\n    uniform vec2 _jointsTextureSize;\n\n    #if _JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = _jointsTextureSize.x;\n        float height = _jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        \n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = _jointsTextureSize.x;\n        float height = _jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    const int _JOINT_MATRICES_SIZE = 50;\n    uniform mat4 _jointMatrices[_JOINT_MATRICES_SIZE];\n\n    mat4 getBoneMatrix(const in float i) {\n      return _jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\n \n#if _USE_SHADOW_MAP\n  #if _NUM_SHADOW_LIGHTS > 0\n    #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n      uniform mat4 cc_lightViewProjMatrix_{id};\n      uniform float cc_minDepth_{id};\n      uniform float cc_maxDepth_{id};\n      varying vec4 v_posLightSpace{id};\n      varying float v_depth{id};\n    #pragma endFor\n  #endif\n#endif\n\nvoid CLAC_SHADOW () {\n  #if _USE_SHADOW_MAP\n    #if _NUM_SHADOW_LIGHTS > 0\n      #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n        v_posLightSpace{id} = cc_lightViewProjMatrix_{id} * vec4(v_worldPos, 1.0);\n        v_depth{id} = (v_posLightSpace{id}.z + cc_minDepth_{id}) / (cc_minDepth_{id} + cc_maxDepth_{id});\n      #pragma endFor\n    #endif\n  #endif\n}\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  vec4 normal = vec4(1, 1, 1, 0);\n\n  MUL_ATTR_NORMAL(normal);\n  SKIN_VERTEX(position, normal);\n\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_worldNormal = cc_matWorldIT * normal.xyz;\n\n  CLAC_SHADOW();\n  ATTRIBUTE_TO_VARYING();\n  \n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}\n\n\n","frag":"  #extension GL_OES_standard_derivatives : enable\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matView;\n\nuniform mat4 cc_matViewProj;\n\nuniform vec3 cc_cameraPos;                       \n\nuniform vec3 cc_sceneAmbient;                    \n\n#ifndef USE_DIFFUSE_TEXTURE\n  #ifndef USE_EMISSIVE_TEXTURE\n    #ifndef USE_SPECULAR_TEXTURE\n      #ifndef USE_NORMAL_TEXTURE\n        #define _NOT_USE_TEXTURE 1\n      #endif\n    #endif\n  #endif\n#endif\n\n#if USE_TILING_OFFSET && _USE_ATTRIBUTE_UV0\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n#endif\n\n#ifdef _IS_VERT_SHADER\n  attribute vec3 a_position;\n#endif\n\n#ifndef _NOT_USE_TEXTURE\n\n  #if _USE_ATTRIBUTE_UV0\n    #ifdef _IS_VERT_SHADER\n      attribute mediump vec2 a_uv0;\n    #endif\n\n    varying mediump vec2 v_uv0;\n  #endif\n\n#endif\n\n#if _USE_ATTRIBUTE_COLOR\n\n  #ifdef _IS_VERT_SHADER\n    attribute lowp vec4 a_color;\n  #endif\n\n  varying lowp vec4 v_color;\n#endif\n\n#if _USE_ATTRIBUTE_NORMAL\n  #ifdef _IS_VERT_SHADER\n    attribute vec3 a_normal;\n  #endif\n#endif\n\n#ifdef _IS_VERT_SHADER\n\n  void ATTRIBUTE_TO_VARYING () {\n\n    #if _USE_ATTRIBUTE_COLOR\n        v_color = a_color;\n    #endif\n\n    #ifndef _NOT_USE_TEXTURE\n      #if _USE_ATTRIBUTE_UV0\n        v_uv0 = a_uv0;\n\n        #if USE_TILING_OFFSET\n          v_uv0 = v_uv0 * mainTiling + mainOffset;\n        #endif\n      #endif\n    #endif\n\n  }\n\n#endif\n\nvoid MUL_ATTR_COLOR (inout vec4 color) {\n  #if _USE_ATTRIBUTE_COLOR\n    #ifdef _IS_VERT_SHADER\n      color *= a_color;\n    #else\n      color *= v_color;\n    #endif\n  #endif\n}\n\nvoid MUL_ATTR_NORMAL (inout vec3 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal *= a_normal;\n    #endif\n  #endif\n}\nvoid MUL_ATTR_NORMAL (inout vec4 normal) {\n  #if _USE_ATTRIBUTE_NORMAL\n    #ifdef _IS_VERT_SHADER\n      normal.xyz *= a_normal;\n    #endif\n  #endif\n}\n\nvec3 gammaToLinearSpaceRGB(in vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\n\nvec3 linearToGammaSpaceRGB(in vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\nvec4 gammaToLinearSpaceRGBA(in vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\n\nvec4 linearToGammaSpaceRGBA(in vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\n\nvec4 linearToLinear (in vec4 value) {\n  return value;\n}\n\n#if INPUT_IS_GAMMA\n  #define TEXEL_TO_LINEAR gammaToLinearSpaceRGBA\n#else\n  #define TEXEL_TO_LINEAR linearToLinear\n#endif\n\n#if OUTPUT_TO_GAMMA\n  #define LINEAR_TO_OUTPUT_TEXEL linearToGammaSpaceRGBA\n#else\n  #define LINEAR_TO_OUTPUT_TEXEL linearToLinear\n#endif\n\n#define PI 3.14159265359\n#define PI2 6.28318530718\n#define EPSILON 1e-6\n#define LOG2 1.442695\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\n\n#if USE_NORMAL_TEXTURE && GL_OES_standard_derivatives\n\n  uniform sampler2D normalTexture;\n\n  vec3 getNormal(vec3 pos, vec3 normal) {\n    vec3 q0 = vec3( dFdx( pos.x ), dFdx( pos.y ), dFdx( pos.z ) );\n    vec3 q1 = vec3( dFdy( pos.x ), dFdy( pos.y ), dFdy( pos.z ) );\n    vec2 st0 = dFdx( v_uv0.st );\n    vec2 st1 = dFdy( v_uv0.st );\n    vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n    vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n    vec3 N = normal;\n    vec3 mapN = texture2D(normalTexture, v_uv0).rgb * 2.0 - 1.0;\n    mapN.xy = 1.0 * mapN.xy;\n    mat3 tsn = mat3( S, T, N );\n    return normalize( tsn * mapN );\n  }\n#endif\n\nvoid CALC_NORMAL (inout vec3 normal, in vec3 worldPos, in vec3 worldNormal) {\n  normal = normalize(worldNormal);\n  \n  #if USE_NORMAL_TEXTURE && GL_OES_standard_derivatives\n    normal = getNormal(worldPos, normal);\n  #endif\n}\n\nuniform lowp vec4 diffuseColor;\n\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color, in vec2 uv) {\n  #if USE_DIFFUSE_TEXTURE && _USE_ATTRIBUTE_UV0\n    vec4 diffuseTextureColor = texture2D(diffuseTexture, uv);\n    #if _USE_ETC1_DIFFUSETEXTURE\n      diffuseTextureColor.a *= texture2D(diffuseTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    color *= TEXEL_TO_LINEAR(diffuseTextureColor);\n  #endif\n}\n\nvoid MULTIPLY_DIFFUSE_TEXTRUE_COLOR (inout vec4 color) {\n  #if USE_DIFFUSE_TEXTURE && _USE_ATTRIBUTE_UV0\n    \n    #ifdef _IS_VERT_SHADER\n      vec2 uv = a_uv0;\n    #else\n      vec2 uv = v_uv0;\n    #endif\n\n    MULTIPLY_DIFFUSE_TEXTRUE_COLOR(color, uv);\n  #endif\n}\n\nvoid CALC_DIFFUSE (inout vec4 diffuse, in vec2 uv) {\n  diffuse = diffuseColor;\n\n  MUL_ATTR_COLOR(diffuse);\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(diffuse, uv);\n}\n\nvoid CALC_DIFFUSE (inout vec4 diffuse) {\n  diffuse = diffuseColor;\n\n  MUL_ATTR_COLOR(diffuse);\n  MULTIPLY_DIFFUSE_TEXTRUE_COLOR(diffuse);\n}\n\n#if USE_SPECULAR\n  uniform lowp vec3 specularColor;\n\n  #if USE_SPECULAR_TEXTURE\n    uniform sampler2D specularTexture;\n  #endif\n\n#endif\n\nvoid MULTIPLY_SPECULAR_TEXTRUE_COLOR (inout vec3 color, in vec2 uv) {\n  #if USE_SPECULAR_TEXTURE && _USE_ATTRIBUTE_UV0\n    vec4 specularTextureColor = texture2D(specularTexture, uv);\n    specularTextureColor = TEXEL_TO_LINEAR(specularTextureColor);\n    color *= specularTextureColor.rgb;\n  #endif\n}\n\nvoid MULTIPLY_SPECULAR_TEXTRUE_COLOR (inout vec3 color) {\n  #if USE_SPECULAR_TEXTURE && _USE_ATTRIBUTE_UV0\n    \n    #ifdef _IS_VERT_SHADER\n      vec2 uv = a_uv0;\n    #else\n      vec2 uv = v_uv0;\n    #endif\n\n    MULTIPLY_SPECULAR_TEXTRUE_COLOR(color, uv);\n  #endif\n}\n\nvoid CALC_SPECULAR (inout vec3 specular, in vec2 uv) {\n  #if USE_SPECULAR\n    specular = specularColor;\n    MULTIPLY_SPECULAR_TEXTRUE_COLOR(specular, uv);\n  #endif\n}\n\nvoid CALC_SPECULAR (inout vec3 specular) {\n  #if USE_SPECULAR\n    specular = specularColor;\n    MULTIPLY_SPECULAR_TEXTRUE_COLOR(specular);\n  #endif\n}\n\n#if USE_EMISSIVE\n  uniform lowp vec3 emissiveColor;\n\n  #if USE_EMISSIVE_TEXTURE\n    uniform sampler2D emissiveTexture;\n  #endif\n\n#endif\n\nvoid MULTIPLY_EMISSIVE_TEXTRUE_COLOR (inout vec3 color, in vec2 uv) {\n  #if USE_EMISSIVE_TEXTURE && _USE_ATTRIBUTE_UV0\n    vec4 emissiveTextureColor = texture2D(emissiveTexture, uv);\n    #if _USE_ETC1_EMISSIVETEXTURE\n      emissiveTextureColor.a *= texture2D(emissiveTexture, uv + vec2(0, 0.5)).r;\n    #endif\n    emissiveTextureColor = TEXEL_TO_LINEAR(emissiveTextureColor);\n    color *= emissiveTextureColor.rgb;\n  #endif\n}\n\nvoid MULTIPLY_EMISSIVE_TEXTRUE_COLOR (inout vec3 color) {\n  #if USE_EMISSIVE_TEXTURE && _USE_ATTRIBUTE_UV0\n    \n    #ifdef _IS_VERT_SHADER\n      vec2 uv = a_uv0;\n    #else\n      vec2 uv = v_uv0;\n    #endif\n\n    MULTIPLY_EMISSIVE_TEXTRUE_COLOR(color, uv);\n  #endif\n}\n\nvoid CALC_EMISSIVE (inout vec3 emissive, in vec2 uv) {\n  #if USE_EMISSIVE\n    emissive = emissiveColor;\n    MULTIPLY_EMISSIVE_TEXTRUE_COLOR(emissive, uv);\n  #endif\n}\n\nvoid CALC_EMISSIVE (inout vec3 emissive) {\n  #if USE_EMISSIVE\n    emissive = emissiveColor;\n    MULTIPLY_EMISSIVE_TEXTRUE_COLOR(emissive);\n  #endif\n}\n\n#if _USE_SHADOW_MAP\n  \n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\n  #if _NUM_SHADOW_LIGHTS > 0\n    #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n      uniform sampler2D cc_shadowMap_{id};\n      uniform float cc_darkness_{id};\n      uniform float cc_depthScale_{id};\n      uniform float cc_frustumEdgeFalloff_{id};\n      varying vec4 v_posLightSpace{id};\n      varying float v_depth{id};\n    #pragma endFor\n  #endif\n\n  float computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n    float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n    return mix(esm, 1.0, mask);\n  }\n\n  float computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n    vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n    vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n    if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n      return 1.0;\n    }\n    float currentDepth = clamp(vDepth, 0.0, 1.0);\n    float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n    \n    float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n    return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n  }\n\n  float computeShadow() {\n    float shadow = 1.0;\n    #if _NUM_SHADOW_LIGHTS > 0\n      #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n        shadow *= computeShadowESM(cc_shadowMap_{id}, v_posLightSpace{id}, v_depth{id}, cc_depthScale_{id}, cc_darkness_{id}, cc_frustumEdgeFalloff_{id});\n      #pragma endFor\n    #endif\n    return shadow;\n  }\n\n#endif\n\n#if _NUM_DIR_LIGHTS > 0\n  uniform vec4 cc_dirLightDirection[_NUM_DIR_LIGHTS];            \n  uniform vec4 cc_dirLightColor[_NUM_DIR_LIGHTS];                \n#endif\n\n#if _NUM_POINT_LIGHTS > 0\n  uniform vec4 cc_pointLightPositionAndRange[_NUM_POINT_LIGHTS];   \n  uniform vec4 cc_pointLightColor[_NUM_POINT_LIGHTS];              \n#endif\n\n#if _NUM_SPOT_LIGHTS > 0\n  uniform vec4 cc_spotLightPositionAndRange[_NUM_SPOT_LIGHTS];    \n  uniform vec4 cc_spotLightDirection[_NUM_SPOT_LIGHTS];           \n  uniform vec4 cc_spotLightColor[_NUM_SPOT_LIGHTS];               \n#endif\n\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n};\n\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  return ret;\n}\n\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  \n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  return ret;\n}\n\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  \n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  return ret;\n}\n\nuniform float glossiness;\n\nstruct PhongMaterial {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n};\n\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\n\nvoid brdf (inout Lighting result, LightInfo info, vec3 normal, vec3 viewDirection, float glossiness) {\n  float ndh = 0.0;\n  \n  vec3 halfDir = normalize(viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, glossiness * 128.0));\n\n  vec3 diffuse = info.radiance * max(0.0, dot(normal, info.lightDir));\n  vec3 specular = info.radiance * NdotH;\n\n  result.diffuse += diffuse;\n  result.specular += specular;\n}\n\nLighting getPhongLighting (vec3 normal, vec3 worldPos, vec3 viewDirection, float glossiness) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n\n  #if _NUM_DIR_LIGHTS > 0\n  for (int i = 0; i < _NUM_DIR_LIGHTS; i++) {\n    LightInfo info = computeDirectionalLighting(cc_dirLightDirection[i], cc_dirLightColor[i]);\n    brdf(result, info, normal, viewDirection, glossiness);\n  }\n  #endif\n\n  #if _NUM_POINT_LIGHTS > 0\n  for (int i = 0; i < _NUM_POINT_LIGHTS; i++) {\n    LightInfo info = computePointLighting(worldPos, cc_pointLightPositionAndRange[i], cc_pointLightColor[i]);\n    brdf(result, info, normal, viewDirection, glossiness);\n  }\n  #endif\n\n  #if _NUM_SPOT_LIGHTS > 0\n  for (int i = 0; i < _NUM_SPOT_LIGHTS; i++) {\n    LightInfo info = computeSpotLighting(worldPos, cc_spotLightPositionAndRange[i], cc_spotLightDirection[i], cc_spotLightColor[i]);\n    brdf(result, info, normal, viewDirection, glossiness);\n  }\n  #endif\n\n  result.diffuse += cc_sceneAmbient;\n\n  return result;\n}\n\nvec4 composePhongShading (Lighting lighting, PhongMaterial mtl) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n\n  \n  o.rgb = lighting.diffuse * mtl.diffuse;\n  \n  #if USE_EMISSIVE\n    o.rgb += mtl.emissive;\n  #endif\n\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * mtl.specular;\n  #endif\n  \n  #if _USE_SHADOW_MAP\n    o.rgb *= computeShadow();\n  #endif\n\n  o.a = mtl.opacity;\n\n  return o;\n}\n\nvoid CALC_PHONG_LIGHTING (inout vec4 outColor, in PhongMaterial material, in vec3 normal, in vec3 worldPosition, in vec3 viewDirection) {\n  Lighting phongLighting = getPhongLighting(normal, worldPosition, viewDirection, glossiness);\n  outColor = composePhongShading(phongLighting, material);\n}\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvoid main () {\n  vec4 diffuse;\n  CALC_DIFFUSE(diffuse);\n  ALPHA_TEST(diffuse);\n\n  PhongMaterial material;\n  material.diffuse = diffuse.rgb;\n  material.opacity = diffuse.a;\n\n  CALC_EMISSIVE(material.emissive);\n  CALC_SPECULAR(material.specular);\n\n  vec3 viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  vec3 normal;\n  vec4 phongColor;\n\n  CALC_NORMAL(normal, v_worldPos, v_worldNormal);\n  CALC_PHONG_LIGHTING(phongColor, material, normal, v_worldPos, viewDirection);\n\n  gl_FragColor = LINEAR_TO_OUTPUT_TEXEL( phongColor );\n}\n\n\n","defines":[{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":[]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":[]},{"name":"USE_TILING_OFFSET","type":"boolean","defines":[]},{"name":"_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"_USE_SKINNING","type":"boolean","defines":[]},{"name":"_USE_JOINTS_TEXTRUE","type":"boolean","defines":["_USE_SKINNING"]},{"name":"_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["_USE_SKINNING","_USE_JOINTS_TEXTRUE"]},{"name":"_USE_SHADOW_MAP","type":"boolean","defines":[]},{"name":"_NUM_SHADOW_LIGHTS","type":"number","defines":["_USE_SHADOW_MAP"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"_USE_ETC1_DIFFUSETEXTURE","type":"boolean","defines":["USE_DIFFUSE_TEXTURE","_USE_ATTRIBUTE_UV0"]},{"name":"USE_SPECULAR","type":"boolean","defines":[]},{"name":"USE_EMISSIVE","type":"boolean","defines":[]},{"name":"_USE_ETC1_EMISSIVETEXTURE","type":"boolean","defines":["USE_EMISSIVE_TEXTURE","_USE_ATTRIBUTE_UV0"]},{"name":"_NUM_DIR_LIGHTS","type":"number","defines":[]},{"name":"_NUM_POINT_LIGHTS","type":"number","defines":[]},{"name":"_NUM_SPOT_LIGHTS","type":"number","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"uniforms":[{"name":"mainTiling","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"mainOffset","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"mainTiling","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"mainOffset","type":5,"property":true,"defines":["USE_TILING_OFFSET","_USE_ATTRIBUTE_UV0"]},{"name":"normalTexture","type":13,"property":true,"defines":["USE_NORMAL_TEXTURE"]},{"name":"diffuseColor","type":9,"property":true,"defines":[]},{"name":"diffuseTexture","type":13,"property":true,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"specularColor","type":8,"property":true,"defines":["USE_SPECULAR"]},{"name":"specularTexture","type":13,"property":true,"defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]},{"name":"emissiveColor","type":8,"property":true,"defines":["USE_EMISSIVE"]},{"name":"emissiveTexture","type":13,"property":true,"defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"glossiness","type":4,"property":true,"defines":[]},{"name":"alphaThreshold","type":4,"property":true,"defines":["USE_ALPHA_TEST"]}],"attributes":[{"name":"a_position","type":6,"defines":[]},{"name":"a_uv0","type":5,"defines":["_USE_ATTRIBUTE_UV0"]},{"name":"a_color","type":7,"defines":["_USE_ATTRIBUTE_COLOR"]},{"name":"a_normal","type":6,"defines":["_USE_ATTRIBUTE_NORMAL"]},{"name":"a_weights","type":7,"defines":["_USE_SKINNING"]},{"name":"a_joints","type":7,"defines":["_USE_SKINNING"]},{"name":"a_position","type":6,"defines":[]},{"name":"a_uv0","type":5,"defines":["_USE_ATTRIBUTE_UV0"]},{"name":"a_color","type":7,"defines":["_USE_ATTRIBUTE_COLOR"]},{"name":"a_normal","type":6,"defines":["_USE_ATTRIBUTE_NORMAL"]}],"extensions":["OES_standard_derivatives"],"name":"c2dcea110628bad21ccf3b9f6889d5115841395d2cb7ea7bc397f61f"},{"vert":"\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nattribute vec3 a_position;\n\nuniform mat4 cc_matWorld;\nuniform mat4 cc_lightViewProjMatrix;\nuniform float cc_minDepth;\nuniform float cc_maxDepth;\nuniform float cc_bias;\nvarying float vDepth;\n\n#if _USE_SKINNING\n\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n\n  #if _USE_JOINTS_TEXTRUE\n    uniform sampler2D _jointsTexture;\n    uniform vec2 _jointsTextureSize;\n\n    #if _JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = _jointsTextureSize.x;\n        float height = _jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = texture2D(_jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(_jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(_jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(_jointsTexture, vec2(dx * (x + 3.5), y));\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        \n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(_jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(_jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n\n      mat4 getBoneMatrix(const in float i) {\n        float width = _jointsTextureSize.x;\n        float height = _jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n\n        y = dy * (y + 0.5);\n\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    const int _JOINT_MATRICES_SIZE = 50;\n    uniform mat4 _jointMatrices[_JOINT_MATRICES_SIZE];\n\n    mat4 getBoneMatrix(const in float i) {\n      return _jointMatrices[int(i)];\n    }\n  #endif\n\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\n\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\n\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if _USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\n\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n\n  SKIN_VERTEX(position);\n\n  gl_Position = cc_lightViewProjMatrix * cc_matWorld * position;\n\n  \n  vDepth = ((gl_Position.z + cc_minDepth) / (cc_minDepth + cc_maxDepth)) + cc_bias;\n}\n\n\n","frag":"\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\nuniform float cc_depthScale;\nvarying float vDepth;\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\nvoid main () {\n  \n  \n  gl_FragColor = packDepthToRGBA(vDepth);\n  \n  \n}\n\n\n","defines":[{"name":"_USE_SKINNING","type":"boolean","defines":[]},{"name":"_USE_JOINTS_TEXTRUE","type":"boolean","defines":["_USE_SKINNING"]},{"name":"_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["_USE_SKINNING","_USE_JOINTS_TEXTRUE"]}],"uniforms":[],"attributes":[{"name":"a_position","type":6,"defines":[]},{"name":"a_weights","type":7,"defines":["_USE_SKINNING"]},{"name":"a_joints","type":7,"defines":["_USE_SKINNING"]}],"extensions":[],"name":"9a91382f3710c7bfc6b1ac208fac93945dd4609a0e76c9995e1601fd"}]}]